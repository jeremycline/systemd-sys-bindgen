/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
pub type __clock_t = ::std::os::raw::c_long;
pub type __clockid_t = ::std::os::raw::c_int;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type clockid_t = __clockid_t;
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub type _sd_destroy_t =
    ::std::option::Option<unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn sd_listen_fds(unset_environment: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_listen_fds_with_names(
        unset_environment: ::std::os::raw::c_int,
        names: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_is_fifo(
        fd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_is_special(
        fd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_is_socket(
        fd: ::std::os::raw::c_int,
        family: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        listening: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_is_socket_inet(
        fd: ::std::os::raw::c_int,
        family: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        listening: ::std::os::raw::c_int,
        port: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_is_socket_sockaddr(
        fd: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        addr: *const sockaddr,
        addr_len: ::std::os::raw::c_uint,
        listening: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_is_socket_unix(
        fd: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        listening: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        length: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_is_mq(
        fd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_notify(
        unset_environment: ::std::os::raw::c_int,
        state: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_notifyf(
        unset_environment: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_notify(
        pid: pid_t,
        unset_environment: ::std::os::raw::c_int,
        state: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_notifyf(
        pid: pid_t,
        unset_environment: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_notify_with_fds(
        pid: pid_t,
        unset_environment: ::std::os::raw::c_int,
        state: *const ::std::os::raw::c_char,
        fds: *const ::std::os::raw::c_int,
        n_fds: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_booted() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_watchdog_enabled(
        unset_environment: ::std::os::raw::c_int,
        usec: *mut u64,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
    _bindgen_union_align: [u64; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_tid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_overrun as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_sigval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_sigval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_status as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_utime as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_stime as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            >()))
            ._lower as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_lower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            >()))
            ._upper as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_upper)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))
                ._addr_bnd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_addr_bnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))._pkey
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_pkey)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr_lsb
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()))._bounds as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_band as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_fd as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._call_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._syscall as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._arch as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._kill as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._rt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigchld as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigfault as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigpoll as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigsys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).__pad0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>()))._sifields as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct inotify_event {
    pub wd: ::std::os::raw::c_int,
    pub mask: u32,
    pub cookie: u32,
    pub len: u32,
    pub name: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_inotify_event() {
    assert_eq!(
        ::std::mem::size_of::<inotify_event>(),
        16usize,
        concat!("Size of: ", stringify!(inotify_event))
    );
    assert_eq!(
        ::std::mem::align_of::<inotify_event>(),
        4usize,
        concat!("Alignment of ", stringify!(inotify_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inotify_event>())).wd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inotify_event),
            "::",
            stringify!(wd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inotify_event>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inotify_event),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inotify_event>())).cookie as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inotify_event),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inotify_event>())).len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(inotify_event),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inotify_event>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(inotify_event),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signalfd_siginfo {
    pub ssi_signo: u32,
    pub ssi_errno: i32,
    pub ssi_code: i32,
    pub ssi_pid: u32,
    pub ssi_uid: u32,
    pub ssi_fd: i32,
    pub ssi_tid: u32,
    pub ssi_band: u32,
    pub ssi_overrun: u32,
    pub ssi_trapno: u32,
    pub ssi_status: i32,
    pub ssi_int: i32,
    pub ssi_ptr: u64,
    pub ssi_utime: u64,
    pub ssi_stime: u64,
    pub ssi_addr: u64,
    pub ssi_addr_lsb: u16,
    pub __pad2: u16,
    pub ssi_syscall: i32,
    pub ssi_call_addr: u64,
    pub ssi_arch: u32,
    pub __pad: [u8; 28usize],
}
#[test]
fn bindgen_test_layout_signalfd_siginfo() {
    assert_eq!(
        ::std::mem::size_of::<signalfd_siginfo>(),
        128usize,
        concat!("Size of: ", stringify!(signalfd_siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<signalfd_siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(signalfd_siginfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_fd as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_tid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_band as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_band)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_overrun as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_overrun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_trapno as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_trapno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_status as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_int as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_ptr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_utime as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_stime as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_addr as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_addr_lsb as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_addr_lsb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).__pad2 as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_syscall as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_syscall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_call_addr as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_call_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).ssi_arch as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(ssi_arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signalfd_siginfo>())).__pad as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(signalfd_siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_event {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_event_source {
    _unused: [u8; 0],
}
pub type sd_event_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut sd_event_source,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_event_io_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut sd_event_source,
        fd: ::std::os::raw::c_int,
        revents: u32,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_event_time_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut sd_event_source,
        usec: u64,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_event_signal_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut sd_event_source,
        si: *const signalfd_siginfo,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_event_child_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut sd_event_source,
        si: *const siginfo_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_event_inotify_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut sd_event_source,
        event: *const inotify_event,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_event_destroy_t = _sd_destroy_t;
extern "C" {
    pub fn sd_event_default(e: *mut *mut sd_event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_new(e: *mut *mut sd_event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_ref(e: *mut sd_event) -> *mut sd_event;
}
extern "C" {
    pub fn sd_event_unref(e: *mut sd_event) -> *mut sd_event;
}
extern "C" {
    pub fn sd_event_add_io(
        e: *mut sd_event,
        s: *mut *mut sd_event_source,
        fd: ::std::os::raw::c_int,
        events: u32,
        callback: sd_event_io_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_add_time(
        e: *mut sd_event,
        s: *mut *mut sd_event_source,
        clock: clockid_t,
        usec: u64,
        accuracy: u64,
        callback: sd_event_time_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_add_signal(
        e: *mut sd_event,
        s: *mut *mut sd_event_source,
        sig: ::std::os::raw::c_int,
        callback: sd_event_signal_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_add_child(
        e: *mut sd_event,
        s: *mut *mut sd_event_source,
        pid: pid_t,
        options: ::std::os::raw::c_int,
        callback: sd_event_child_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_add_child_pidfd(
        e: *mut sd_event,
        s: *mut *mut sd_event_source,
        pidfd: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        callback: sd_event_child_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_add_inotify(
        e: *mut sd_event,
        s: *mut *mut sd_event_source,
        path: *const ::std::os::raw::c_char,
        mask: u32,
        callback: sd_event_inotify_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_add_defer(
        e: *mut sd_event,
        s: *mut *mut sd_event_source,
        callback: sd_event_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_add_post(
        e: *mut sd_event,
        s: *mut *mut sd_event_source,
        callback: sd_event_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_add_exit(
        e: *mut sd_event,
        s: *mut *mut sd_event_source,
        callback: sd_event_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_prepare(e: *mut sd_event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_wait(e: *mut sd_event, usec: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_dispatch(e: *mut sd_event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_run(e: *mut sd_event, usec: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_loop(e: *mut sd_event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_exit(e: *mut sd_event, code: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_now(
        e: *mut sd_event,
        clock: clockid_t,
        usec: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_get_fd(e: *mut sd_event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_get_state(e: *mut sd_event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_get_tid(e: *mut sd_event, tid: *mut pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_get_exit_code(
        e: *mut sd_event,
        code: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_set_watchdog(
        e: *mut sd_event,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_get_watchdog(e: *mut sd_event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_get_iteration(e: *mut sd_event, ret: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_ref(s: *mut sd_event_source) -> *mut sd_event_source;
}
extern "C" {
    pub fn sd_event_source_unref(s: *mut sd_event_source) -> *mut sd_event_source;
}
extern "C" {
    pub fn sd_event_source_disable_unref(s: *mut sd_event_source) -> *mut sd_event_source;
}
extern "C" {
    pub fn sd_event_source_get_event(s: *mut sd_event_source) -> *mut sd_event;
}
extern "C" {
    pub fn sd_event_source_get_userdata(s: *mut sd_event_source) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sd_event_source_set_userdata(
        s: *mut sd_event_source,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sd_event_source_set_description(
        s: *mut sd_event_source,
        description: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_description(
        s: *mut sd_event_source,
        description: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_prepare(
        s: *mut sd_event_source,
        callback: sd_event_handler_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_pending(s: *mut sd_event_source) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_priority(
        s: *mut sd_event_source,
        priority: *mut i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_priority(
        s: *mut sd_event_source,
        priority: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_enabled(
        s: *mut sd_event_source,
        enabled: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_enabled(
        s: *mut sd_event_source,
        enabled: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_io_fd(s: *mut sd_event_source) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_io_fd(
        s: *mut sd_event_source,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_io_fd_own(s: *mut sd_event_source) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_io_fd_own(
        s: *mut sd_event_source,
        own: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_io_events(
        s: *mut sd_event_source,
        events: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_io_events(
        s: *mut sd_event_source,
        events: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_io_revents(
        s: *mut sd_event_source,
        revents: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_time(
        s: *mut sd_event_source,
        usec: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_time(s: *mut sd_event_source, usec: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_time_accuracy(
        s: *mut sd_event_source,
        usec: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_time_accuracy(
        s: *mut sd_event_source,
        usec: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_time_clock(
        s: *mut sd_event_source,
        clock: *mut clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_signal(s: *mut sd_event_source) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_child_pid(
        s: *mut sd_event_source,
        pid: *mut pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_child_pidfd(s: *mut sd_event_source) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_child_pidfd_own(s: *mut sd_event_source) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_child_pidfd_own(
        s: *mut sd_event_source,
        own: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_child_process_own(s: *mut sd_event_source) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_child_process_own(
        s: *mut sd_event_source,
        own: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_send_child_signal(
        s: *mut sd_event_source,
        sig: ::std::os::raw::c_int,
        si: *const siginfo_t,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_inotify_mask(
        s: *mut sd_event_source,
        ret: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_destroy_callback(
        s: *mut sd_event_source,
        callback: sd_event_destroy_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_destroy_callback(
        s: *mut sd_event_source,
        ret: *mut sd_event_destroy_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_get_floating(s: *mut sd_event_source) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_event_source_set_floating(
        s: *mut sd_event_source,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type sd_id128_t = sd_id128;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sd_id128 {
    pub bytes: [u8; 16usize],
    pub qwords: [u64; 2usize],
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_sd_id128() {
    assert_eq!(
        ::std::mem::size_of::<sd_id128>(),
        16usize,
        concat!("Size of: ", stringify!(sd_id128))
    );
    assert_eq!(
        ::std::mem::align_of::<sd_id128>(),
        8usize,
        concat!("Alignment of ", stringify!(sd_id128))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sd_id128>())).bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_id128),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sd_id128>())).qwords as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_id128),
            "::",
            stringify!(qwords)
        )
    );
}
extern "C" {
    pub fn sd_id128_to_string(
        id: sd_id128_t,
        s: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sd_id128_from_string(
        s: *const ::std::os::raw::c_char,
        ret: *mut sd_id128_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_id128_randomize(ret: *mut sd_id128_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_id128_get_machine(ret: *mut sd_id128_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_id128_get_boot(ret: *mut sd_id128_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_id128_get_invocation(ret: *mut sd_id128_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_id128_get_machine_app_specific(
        app_id: sd_id128_t,
        ret: *mut sd_id128_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_id128_get_boot_app_specific(
        app_id: sd_id128_t,
        ret: *mut sd_id128_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus_message {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus_slot {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus_creds {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus_track {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus_error {
    pub name: *const ::std::os::raw::c_char,
    pub message: *const ::std::os::raw::c_char,
    pub _need_free: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sd_bus_error() {
    assert_eq!(
        ::std::mem::size_of::<sd_bus_error>(),
        24usize,
        concat!("Size of: ", stringify!(sd_bus_error))
    );
    assert_eq!(
        ::std::mem::align_of::<sd_bus_error>(),
        8usize,
        concat!("Alignment of ", stringify!(sd_bus_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sd_bus_error>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_error),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sd_bus_error>())).message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_error),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sd_bus_error>()))._need_free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_error),
            "::",
            stringify!(_need_free)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus_error_map {
    pub name: *const ::std::os::raw::c_char,
    pub code: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sd_bus_error_map() {
    assert_eq!(
        ::std::mem::size_of::<sd_bus_error_map>(),
        16usize,
        concat!("Size of: ", stringify!(sd_bus_error_map))
    );
    assert_eq!(
        ::std::mem::align_of::<sd_bus_error_map>(),
        8usize,
        concat!("Alignment of ", stringify!(sd_bus_error_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sd_bus_error_map>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_error_map),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sd_bus_error_map>())).code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_error_map),
            "::",
            stringify!(code)
        )
    );
}
pub type sd_bus_message_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        m: *mut sd_bus_message,
        userdata: *mut ::std::os::raw::c_void,
        ret_error: *mut sd_bus_error,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_bus_property_get_t = ::std::option::Option<
    unsafe extern "C" fn(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        reply: *mut sd_bus_message,
        userdata: *mut ::std::os::raw::c_void,
        ret_error: *mut sd_bus_error,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_bus_property_set_t = ::std::option::Option<
    unsafe extern "C" fn(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        property: *const ::std::os::raw::c_char,
        value: *mut sd_bus_message,
        userdata: *mut ::std::os::raw::c_void,
        ret_error: *mut sd_bus_error,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_bus_object_find_t = ::std::option::Option<
    unsafe extern "C" fn(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        userdata: *mut ::std::os::raw::c_void,
        ret_found: *mut *mut ::std::os::raw::c_void,
        ret_error: *mut sd_bus_error,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_bus_node_enumerator_t = ::std::option::Option<
    unsafe extern "C" fn(
        bus: *mut sd_bus,
        prefix: *const ::std::os::raw::c_char,
        userdata: *mut ::std::os::raw::c_void,
        ret_nodes: *mut *mut *mut ::std::os::raw::c_char,
        ret_error: *mut sd_bus_error,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_bus_track_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        track: *mut sd_bus_track,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type sd_bus_destroy_t = _sd_destroy_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sd_bus_vtable {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize], u64>,
    pub x: sd_bus_vtable__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sd_bus_vtable__bindgen_ty_1 {
    pub start: sd_bus_vtable__bindgen_ty_1__bindgen_ty_1,
    pub method: sd_bus_vtable__bindgen_ty_1__bindgen_ty_2,
    pub signal: sd_bus_vtable__bindgen_ty_1__bindgen_ty_3,
    pub property: sd_bus_vtable__bindgen_ty_1__bindgen_ty_4,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus_vtable__bindgen_ty_1__bindgen_ty_1 {
    pub element_size: size_t,
    pub features: u64,
    pub vtable_format_reference: *const ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sd_bus_vtable__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_1>())).element_size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_1>())).features
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_1>()))
                .vtable_format_reference as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(vtable_format_reference)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus_vtable__bindgen_ty_1__bindgen_ty_2 {
    pub member: *const ::std::os::raw::c_char,
    pub signature: *const ::std::os::raw::c_char,
    pub result: *const ::std::os::raw::c_char,
    pub handler: sd_bus_message_handler_t,
    pub offset: size_t,
    pub names: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sd_bus_vtable__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_2>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_2>())).member as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(member)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_2>())).signature
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_2>())).result as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_2>())).handler
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_2>())).offset as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_2>())).names as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(names)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus_vtable__bindgen_ty_1__bindgen_ty_3 {
    pub member: *const ::std::os::raw::c_char,
    pub signature: *const ::std::os::raw::c_char,
    pub names: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sd_bus_vtable__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_3>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_3>())).member as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(member)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_3>())).signature
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_3>())).names as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(names)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_bus_vtable__bindgen_ty_1__bindgen_ty_4 {
    pub member: *const ::std::os::raw::c_char,
    pub signature: *const ::std::os::raw::c_char,
    pub get: sd_bus_property_get_t,
    pub set: sd_bus_property_set_t,
    pub offset: size_t,
}
#[test]
fn bindgen_test_layout_sd_bus_vtable__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_4>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_4>())).member as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(member)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_4>())).signature
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_4>())).get as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_4>())).set as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1__bindgen_ty_4>())).offset as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(offset)
        )
    );
}
#[test]
fn bindgen_test_layout_sd_bus_vtable__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sd_bus_vtable__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(sd_bus_vtable__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sd_bus_vtable__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sd_bus_vtable__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1>())).method as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1>())).signal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1),
            "::",
            stringify!(signal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_bus_vtable__bindgen_ty_1>())).property as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable__bindgen_ty_1),
            "::",
            stringify!(property)
        )
    );
}
#[test]
fn bindgen_test_layout_sd_bus_vtable() {
    assert_eq!(
        ::std::mem::size_of::<sd_bus_vtable>(),
        56usize,
        concat!("Size of: ", stringify!(sd_bus_vtable))
    );
    assert_eq!(
        ::std::mem::align_of::<sd_bus_vtable>(),
        8usize,
        concat!("Alignment of ", stringify!(sd_bus_vtable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sd_bus_vtable>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_bus_vtable),
            "::",
            stringify!(x)
        )
    );
}
impl sd_bus_vtable {
    #[inline]
    pub fn type_(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 56u8) as u64) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 56u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(type_: u8, flags: u64) -> __BindgenBitfieldUnit<[u8; 8usize], u64> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize], u64> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let type_: u8 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(8usize, 56u8, {
            let flags: u64 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn sd_bus_default(ret: *mut *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_default_user(ret: *mut *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_default_system(ret: *mut *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_open(ret: *mut *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_open_with_description(
        ret: *mut *mut sd_bus,
        description: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_open_user(ret: *mut *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_open_user_with_description(
        ret: *mut *mut sd_bus,
        description: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_open_system(ret: *mut *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_open_system_with_description(
        ret: *mut *mut sd_bus,
        description: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_open_system_remote(
        ret: *mut *mut sd_bus,
        host: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_open_system_machine(
        ret: *mut *mut sd_bus,
        machine: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_new(ret: *mut *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_address(
        bus: *mut sd_bus,
        address: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_fd(
        bus: *mut sd_bus,
        input_fd: ::std::os::raw::c_int,
        output_fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_exec(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_address(
        bus: *mut sd_bus,
        address: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_bus_client(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_is_bus_client(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_server(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
        bus_id: sd_id128_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_is_server(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_anonymous(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_is_anonymous(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_trusted(bus: *mut sd_bus, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_is_trusted(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_monitor(bus: *mut sd_bus, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_is_monitor(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_description(
        bus: *mut sd_bus,
        description: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_description(
        bus: *mut sd_bus,
        description: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_negotiate_creds(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
        creds_mask: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_negotiate_timestamp(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_negotiate_fds(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_can_send(
        bus: *mut sd_bus,
        type_: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_creds_mask(bus: *mut sd_bus, creds_mask: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_allow_interactive_authorization(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_allow_interactive_authorization(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_exit_on_disconnect(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_exit_on_disconnect(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_close_on_exit(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_close_on_exit(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_watch_bind(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_watch_bind(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_connected_signal(
        bus: *mut sd_bus,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_connected_signal(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_sender(
        bus: *mut sd_bus,
        sender: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_sender(
        bus: *mut sd_bus,
        ret: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_start(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_try_close(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_close(bus: *mut sd_bus);
}
extern "C" {
    pub fn sd_bus_ref(bus: *mut sd_bus) -> *mut sd_bus;
}
extern "C" {
    pub fn sd_bus_unref(bus: *mut sd_bus) -> *mut sd_bus;
}
extern "C" {
    pub fn sd_bus_close_unref(bus: *mut sd_bus) -> *mut sd_bus;
}
extern "C" {
    pub fn sd_bus_flush_close_unref(bus: *mut sd_bus) -> *mut sd_bus;
}
extern "C" {
    pub fn sd_bus_default_flush_close();
}
extern "C" {
    pub fn sd_bus_is_open(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_is_ready(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_bus_id(bus: *mut sd_bus, id: *mut sd_id128_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_scope(
        bus: *mut sd_bus,
        scope: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_tid(bus: *mut sd_bus, tid: *mut pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_owner_creds(
        bus: *mut sd_bus,
        creds_mask: u64,
        ret: *mut *mut sd_bus_creds,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_send(
        bus: *mut sd_bus,
        m: *mut sd_bus_message,
        cookie: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_send_to(
        bus: *mut sd_bus,
        m: *mut sd_bus_message,
        destination: *const ::std::os::raw::c_char,
        cookie: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_call(
        bus: *mut sd_bus,
        m: *mut sd_bus_message,
        usec: u64,
        ret_error: *mut sd_bus_error,
        reply: *mut *mut sd_bus_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_call_async(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        m: *mut sd_bus_message,
        callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
        usec: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_fd(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_events(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_timeout(bus: *mut sd_bus, timeout_usec: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_process(bus: *mut sd_bus, r: *mut *mut sd_bus_message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_process_priority(
        bus: *mut sd_bus,
        max_priority: i64,
        r: *mut *mut sd_bus_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_wait(bus: *mut sd_bus, timeout_usec: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_flush(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_enqueue_for_read(
        bus: *mut sd_bus,
        m: *mut sd_bus_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_current_slot(bus: *mut sd_bus) -> *mut sd_bus_slot;
}
extern "C" {
    pub fn sd_bus_get_current_message(bus: *mut sd_bus) -> *mut sd_bus_message;
}
extern "C" {
    pub fn sd_bus_get_current_handler(bus: *mut sd_bus) -> sd_bus_message_handler_t;
}
extern "C" {
    pub fn sd_bus_get_current_userdata(bus: *mut sd_bus) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sd_bus_attach_event(
        bus: *mut sd_bus,
        e: *mut sd_event,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_detach_event(bus: *mut sd_bus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_event(bus: *mut sd_bus) -> *mut sd_event;
}
extern "C" {
    pub fn sd_bus_get_n_queued_read(bus: *mut sd_bus, ret: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_n_queued_write(bus: *mut sd_bus, ret: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_method_call_timeout(bus: *mut sd_bus, usec: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_method_call_timeout(bus: *mut sd_bus, ret: *mut u64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_add_filter(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_add_match(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        match_: *const ::std::os::raw::c_char,
        callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_add_match_async(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        match_: *const ::std::os::raw::c_char,
        callback: sd_bus_message_handler_t,
        install_callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_add_object(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        path: *const ::std::os::raw::c_char,
        callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_add_fallback(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        prefix: *const ::std::os::raw::c_char,
        callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_add_object_vtable(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        vtable: *const sd_bus_vtable,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_add_fallback_vtable(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        prefix: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        vtable: *const sd_bus_vtable,
        find: sd_bus_object_find_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_add_node_enumerator(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        path: *const ::std::os::raw::c_char,
        callback: sd_bus_node_enumerator_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_add_object_manager(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_slot_ref(slot: *mut sd_bus_slot) -> *mut sd_bus_slot;
}
extern "C" {
    pub fn sd_bus_slot_unref(slot: *mut sd_bus_slot) -> *mut sd_bus_slot;
}
extern "C" {
    pub fn sd_bus_slot_get_bus(slot: *mut sd_bus_slot) -> *mut sd_bus;
}
extern "C" {
    pub fn sd_bus_slot_get_userdata(slot: *mut sd_bus_slot) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sd_bus_slot_set_userdata(
        slot: *mut sd_bus_slot,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sd_bus_slot_set_description(
        slot: *mut sd_bus_slot,
        description: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_slot_get_description(
        slot: *mut sd_bus_slot,
        description: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_slot_get_floating(slot: *mut sd_bus_slot) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_slot_set_floating(
        slot: *mut sd_bus_slot,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_slot_set_destroy_callback(
        s: *mut sd_bus_slot,
        callback: sd_bus_destroy_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_slot_get_destroy_callback(
        s: *mut sd_bus_slot,
        callback: *mut sd_bus_destroy_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_slot_get_current_message(slot: *mut sd_bus_slot) -> *mut sd_bus_message;
}
extern "C" {
    pub fn sd_bus_slot_get_current_handler(slot: *mut sd_bus_slot) -> sd_bus_message_handler_t;
}
extern "C" {
    pub fn sd_bus_slot_get_current_userdata(slot: *mut sd_bus_slot) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sd_bus_message_new(
        bus: *mut sd_bus,
        m: *mut *mut sd_bus_message,
        type_: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_new_signal(
        bus: *mut sd_bus,
        m: *mut *mut sd_bus_message,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_new_method_call(
        bus: *mut sd_bus,
        m: *mut *mut sd_bus_message,
        destination: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_new_method_return(
        call: *mut sd_bus_message,
        m: *mut *mut sd_bus_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_new_method_error(
        call: *mut sd_bus_message,
        m: *mut *mut sd_bus_message,
        e: *const sd_bus_error,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_new_method_errorf(
        call: *mut sd_bus_message,
        m: *mut *mut sd_bus_message,
        name: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_new_method_errno(
        call: *mut sd_bus_message,
        m: *mut *mut sd_bus_message,
        error: ::std::os::raw::c_int,
        e: *const sd_bus_error,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_new_method_errnof(
        call: *mut sd_bus_message,
        m: *mut *mut sd_bus_message,
        error: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_ref(m: *mut sd_bus_message) -> *mut sd_bus_message;
}
extern "C" {
    pub fn sd_bus_message_unref(m: *mut sd_bus_message) -> *mut sd_bus_message;
}
extern "C" {
    pub fn sd_bus_message_seal(
        m: *mut sd_bus_message,
        cookie: u64,
        timeout_usec: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_type(m: *mut sd_bus_message, type_: *mut u8)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_cookie(
        m: *mut sd_bus_message,
        cookie: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_reply_cookie(
        m: *mut sd_bus_message,
        cookie: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_priority(
        m: *mut sd_bus_message,
        priority: *mut i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_expect_reply(m: *mut sd_bus_message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_auto_start(m: *mut sd_bus_message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_allow_interactive_authorization(
        m: *mut sd_bus_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_signature(
        m: *mut sd_bus_message,
        complete: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sd_bus_message_get_path(m: *mut sd_bus_message) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sd_bus_message_get_interface(m: *mut sd_bus_message) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sd_bus_message_get_member(m: *mut sd_bus_message) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sd_bus_message_get_destination(m: *mut sd_bus_message) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sd_bus_message_get_sender(m: *mut sd_bus_message) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sd_bus_message_get_error(m: *mut sd_bus_message) -> *const sd_bus_error;
}
extern "C" {
    pub fn sd_bus_message_get_errno(m: *mut sd_bus_message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_monotonic_usec(
        m: *mut sd_bus_message,
        usec: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_realtime_usec(
        m: *mut sd_bus_message,
        usec: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_seqnum(
        m: *mut sd_bus_message,
        seqnum: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_get_bus(m: *mut sd_bus_message) -> *mut sd_bus;
}
extern "C" {
    pub fn sd_bus_message_get_creds(m: *mut sd_bus_message) -> *mut sd_bus_creds;
}
extern "C" {
    pub fn sd_bus_message_is_signal(
        m: *mut sd_bus_message,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_is_method_call(
        m: *mut sd_bus_message,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_is_method_error(
        m: *mut sd_bus_message,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_is_empty(m: *mut sd_bus_message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_has_signature(
        m: *mut sd_bus_message,
        signature: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_set_expect_reply(
        m: *mut sd_bus_message,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_set_auto_start(
        m: *mut sd_bus_message,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_set_allow_interactive_authorization(
        m: *mut sd_bus_message,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_set_destination(
        m: *mut sd_bus_message,
        destination: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_set_sender(
        m: *mut sd_bus_message,
        sender: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_set_priority(
        m: *mut sd_bus_message,
        priority: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_append(
        m: *mut sd_bus_message,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_appendv(
        m: *mut sd_bus_message,
        types: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_append_basic(
        m: *mut sd_bus_message,
        type_: ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_append_array(
        m: *mut sd_bus_message,
        type_: ::std::os::raw::c_char,
        ptr: *const ::std::os::raw::c_void,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_append_array_space(
        m: *mut sd_bus_message,
        type_: ::std::os::raw::c_char,
        size: size_t,
        ptr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_append_array_iovec(
        m: *mut sd_bus_message,
        type_: ::std::os::raw::c_char,
        iov: *const iovec,
        n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_append_array_memfd(
        m: *mut sd_bus_message,
        type_: ::std::os::raw::c_char,
        memfd: ::std::os::raw::c_int,
        offset: u64,
        size: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_append_string_space(
        m: *mut sd_bus_message,
        size: size_t,
        s: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_append_string_iovec(
        m: *mut sd_bus_message,
        iov: *const iovec,
        n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_append_string_memfd(
        m: *mut sd_bus_message,
        memfd: ::std::os::raw::c_int,
        offset: u64,
        size: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_append_strv(
        m: *mut sd_bus_message,
        l: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_open_container(
        m: *mut sd_bus_message,
        type_: ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_close_container(m: *mut sd_bus_message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_copy(
        m: *mut sd_bus_message,
        source: *mut sd_bus_message,
        all: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_read(
        m: *mut sd_bus_message,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_readv(
        m: *mut sd_bus_message,
        types: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_read_basic(
        m: *mut sd_bus_message,
        type_: ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_read_array(
        m: *mut sd_bus_message,
        type_: ::std::os::raw::c_char,
        ptr: *mut *const ::std::os::raw::c_void,
        size: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_read_strv(
        m: *mut sd_bus_message,
        l: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_skip(
        m: *mut sd_bus_message,
        types: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_enter_container(
        m: *mut sd_bus_message,
        type_: ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_exit_container(m: *mut sd_bus_message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_peek_type(
        m: *mut sd_bus_message,
        type_: *mut ::std::os::raw::c_char,
        contents: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_verify_type(
        m: *mut sd_bus_message,
        type_: ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_at_end(
        m: *mut sd_bus_message,
        complete: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_rewind(
        m: *mut sd_bus_message,
        complete: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_sensitive(m: *mut sd_bus_message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_message_dump(
        m: *mut sd_bus_message,
        f: *mut FILE,
        flags: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_unique_name(
        bus: *mut sd_bus,
        unique: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_request_name(
        bus: *mut sd_bus,
        name: *const ::std::os::raw::c_char,
        flags: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_request_name_async(
        bus: *mut sd_bus,
        ret_slot: *mut *mut sd_bus_slot,
        name: *const ::std::os::raw::c_char,
        flags: u64,
        callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_release_name(
        bus: *mut sd_bus,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_release_name_async(
        bus: *mut sd_bus,
        ret_slot: *mut *mut sd_bus_slot,
        name: *const ::std::os::raw::c_char,
        callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_list_names(
        bus: *mut sd_bus,
        acquired: *mut *mut *mut ::std::os::raw::c_char,
        activatable: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_name_creds(
        bus: *mut sd_bus,
        name: *const ::std::os::raw::c_char,
        mask: u64,
        creds: *mut *mut sd_bus_creds,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_name_machine_id(
        bus: *mut sd_bus,
        name: *const ::std::os::raw::c_char,
        machine: *mut sd_id128_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_call_method(
        bus: *mut sd_bus,
        destination: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        ret_error: *mut sd_bus_error,
        reply: *mut *mut sd_bus_message,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_call_method_async(
        bus: *mut sd_bus,
        slot: *mut *mut sd_bus_slot,
        destination: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_property(
        bus: *mut sd_bus,
        destination: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        ret_error: *mut sd_bus_error,
        reply: *mut *mut sd_bus_message,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_property_trivial(
        bus: *mut sd_bus,
        destination: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        ret_error: *mut sd_bus_error,
        type_: ::std::os::raw::c_char,
        ret_ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_property_string(
        bus: *mut sd_bus,
        destination: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        ret_error: *mut sd_bus_error,
        ret: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_get_property_strv(
        bus: *mut sd_bus,
        destination: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        ret_error: *mut sd_bus_error,
        ret: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_set_property(
        bus: *mut sd_bus,
        destination: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        ret_error: *mut sd_bus_error,
        type_: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_reply_method_return(
        call: *mut sd_bus_message,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_reply_method_error(
        call: *mut sd_bus_message,
        e: *const sd_bus_error,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_reply_method_errorf(
        call: *mut sd_bus_message,
        name: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_reply_method_errno(
        call: *mut sd_bus_message,
        error: ::std::os::raw::c_int,
        e: *const sd_bus_error,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_reply_method_errnof(
        call: *mut sd_bus_message,
        error: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_emit_signal(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_emit_properties_changed_strv(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        names: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_emit_properties_changed(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_emit_object_added(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_emit_object_removed(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_emit_interfaces_added_strv(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        interfaces: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_emit_interfaces_added(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_emit_interfaces_removed_strv(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        interfaces: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_emit_interfaces_removed(
        bus: *mut sd_bus,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_query_sender_creds(
        call: *mut sd_bus_message,
        mask: u64,
        creds: *mut *mut sd_bus_creds,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_query_sender_privilege(
        call: *mut sd_bus_message,
        capability: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_match_signal(
        bus: *mut sd_bus,
        ret: *mut *mut sd_bus_slot,
        sender: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_match_signal_async(
        bus: *mut sd_bus,
        ret: *mut *mut sd_bus_slot,
        sender: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        interface: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        match_callback: sd_bus_message_handler_t,
        add_callback: sd_bus_message_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_new_from_pid(
        ret: *mut *mut sd_bus_creds,
        pid: pid_t,
        creds_mask: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_ref(c: *mut sd_bus_creds) -> *mut sd_bus_creds;
}
extern "C" {
    pub fn sd_bus_creds_unref(c: *mut sd_bus_creds) -> *mut sd_bus_creds;
}
extern "C" {
    pub fn sd_bus_creds_get_mask(c: *const sd_bus_creds) -> u64;
}
extern "C" {
    pub fn sd_bus_creds_get_augmented_mask(c: *const sd_bus_creds) -> u64;
}
extern "C" {
    pub fn sd_bus_creds_get_pid(c: *mut sd_bus_creds, pid: *mut pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_ppid(c: *mut sd_bus_creds, ppid: *mut pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_tid(c: *mut sd_bus_creds, tid: *mut pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_uid(c: *mut sd_bus_creds, uid: *mut uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_euid(c: *mut sd_bus_creds, euid: *mut uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_suid(c: *mut sd_bus_creds, suid: *mut uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_fsuid(c: *mut sd_bus_creds, fsuid: *mut uid_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_gid(c: *mut sd_bus_creds, gid: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_egid(c: *mut sd_bus_creds, egid: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_sgid(c: *mut sd_bus_creds, sgid: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_fsgid(c: *mut sd_bus_creds, fsgid: *mut gid_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_supplementary_gids(
        c: *mut sd_bus_creds,
        gids: *mut *const gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_comm(
        c: *mut sd_bus_creds,
        comm: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_tid_comm(
        c: *mut sd_bus_creds,
        comm: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_exe(
        c: *mut sd_bus_creds,
        exe: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_cmdline(
        c: *mut sd_bus_creds,
        cmdline: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_cgroup(
        c: *mut sd_bus_creds,
        cgroup: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_unit(
        c: *mut sd_bus_creds,
        unit: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_slice(
        c: *mut sd_bus_creds,
        slice: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_user_unit(
        c: *mut sd_bus_creds,
        unit: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_user_slice(
        c: *mut sd_bus_creds,
        slice: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_session(
        c: *mut sd_bus_creds,
        session: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_owner_uid(
        c: *mut sd_bus_creds,
        uid: *mut uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_has_effective_cap(
        c: *mut sd_bus_creds,
        capability: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_has_permitted_cap(
        c: *mut sd_bus_creds,
        capability: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_has_inheritable_cap(
        c: *mut sd_bus_creds,
        capability: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_has_bounding_cap(
        c: *mut sd_bus_creds,
        capability: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_selinux_context(
        c: *mut sd_bus_creds,
        context: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_audit_session_id(
        c: *mut sd_bus_creds,
        sessionid: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_audit_login_uid(
        c: *mut sd_bus_creds,
        loginuid: *mut uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_tty(
        c: *mut sd_bus_creds,
        tty: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_unique_name(
        c: *mut sd_bus_creds,
        name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_well_known_names(
        c: *mut sd_bus_creds,
        names: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_creds_get_description(
        c: *mut sd_bus_creds,
        name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_free(e: *mut sd_bus_error);
}
extern "C" {
    pub fn sd_bus_error_set(
        e: *mut sd_bus_error,
        name: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_setf(
        e: *mut sd_bus_error,
        name: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_set_const(
        e: *mut sd_bus_error,
        name: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_set_errno(
        e: *mut sd_bus_error,
        error: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_set_errnof(
        e: *mut sd_bus_error,
        error: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_set_errnofv(
        e: *mut sd_bus_error,
        error: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_get_errno(e: *const sd_bus_error) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_copy(
        dest: *mut sd_bus_error,
        e: *const sd_bus_error,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_move(
        dest: *mut sd_bus_error,
        e: *mut sd_bus_error,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_is_set(e: *const sd_bus_error) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_has_name(
        e: *const sd_bus_error,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_error_add_map(map: *const sd_bus_error_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_path_encode(
        prefix: *const ::std::os::raw::c_char,
        external_id: *const ::std::os::raw::c_char,
        ret_path: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_path_encode_many(
        out: *mut *mut ::std::os::raw::c_char,
        path_template: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_path_decode(
        path: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        ret_external_id: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_path_decode_many(
        path: *const ::std::os::raw::c_char,
        path_template: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_new(
        bus: *mut sd_bus,
        track: *mut *mut sd_bus_track,
        handler: sd_bus_track_handler_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_ref(track: *mut sd_bus_track) -> *mut sd_bus_track;
}
extern "C" {
    pub fn sd_bus_track_unref(track: *mut sd_bus_track) -> *mut sd_bus_track;
}
extern "C" {
    pub fn sd_bus_track_get_bus(track: *mut sd_bus_track) -> *mut sd_bus;
}
extern "C" {
    pub fn sd_bus_track_get_userdata(track: *mut sd_bus_track) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sd_bus_track_set_userdata(
        track: *mut sd_bus_track,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sd_bus_track_add_sender(
        track: *mut sd_bus_track,
        m: *mut sd_bus_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_remove_sender(
        track: *mut sd_bus_track,
        m: *mut sd_bus_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_add_name(
        track: *mut sd_bus_track,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_remove_name(
        track: *mut sd_bus_track,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_set_recursive(
        track: *mut sd_bus_track,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_get_recursive(track: *mut sd_bus_track) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_count(track: *mut sd_bus_track) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sd_bus_track_count_sender(
        track: *mut sd_bus_track,
        m: *mut sd_bus_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_count_name(
        track: *mut sd_bus_track,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_contains(
        track: *mut sd_bus_track,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sd_bus_track_first(track: *mut sd_bus_track) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sd_bus_track_next(track: *mut sd_bus_track) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sd_bus_track_set_destroy_callback(
        s: *mut sd_bus_track,
        callback: sd_bus_destroy_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_bus_track_get_destroy_callback(
        s: *mut sd_bus_track,
        ret: *mut sd_bus_destroy_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_hwdb {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sd_hwdb_ref(hwdb: *mut sd_hwdb) -> *mut sd_hwdb;
}
extern "C" {
    pub fn sd_hwdb_unref(hwdb: *mut sd_hwdb) -> *mut sd_hwdb;
}
extern "C" {
    pub fn sd_hwdb_new(ret: *mut *mut sd_hwdb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_hwdb_get(
        hwdb: *mut sd_hwdb,
        modalias: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        value: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_hwdb_seek(
        hwdb: *mut sd_hwdb,
        modalias: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_hwdb_enumerate(
        hwdb: *mut sd_hwdb,
        key: *mut *const ::std::os::raw::c_char,
        value: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_print(
        priority: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_printv(
        priority: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_send(format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_sendv(iov: *const iovec, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_perror(message: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_print_with_location(
        priority: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_printv_with_location(
        priority: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_send_with_location(
        file: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_sendv_with_location(
        file: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        iov: *const iovec,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_perror_with_location(
        file: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_stream_fd(
        identifier: *const ::std::os::raw::c_char,
        priority: ::std::os::raw::c_int,
        level_prefix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_journal {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sd_journal_open(
        ret: *mut *mut sd_journal,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_open_namespace(
        ret: *mut *mut sd_journal,
        name_space: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_open_directory(
        ret: *mut *mut sd_journal,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_open_directory_fd(
        ret: *mut *mut sd_journal,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_open_files(
        ret: *mut *mut sd_journal,
        paths: *mut *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_open_files_fd(
        ret: *mut *mut sd_journal,
        fds: *mut ::std::os::raw::c_int,
        n_fds: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_open_container(
        ret: *mut *mut sd_journal,
        machine: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_close(j: *mut sd_journal);
}
extern "C" {
    pub fn sd_journal_previous(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_next(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_previous_skip(j: *mut sd_journal, skip: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_next_skip(j: *mut sd_journal, skip: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_realtime_usec(j: *mut sd_journal, ret: *mut u64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_monotonic_usec(
        j: *mut sd_journal,
        ret: *mut u64,
        ret_boot_id: *mut sd_id128_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_set_data_threshold(j: *mut sd_journal, sz: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_data_threshold(
        j: *mut sd_journal,
        sz: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_data(
        j: *mut sd_journal,
        field: *const ::std::os::raw::c_char,
        data: *mut *const ::std::os::raw::c_void,
        l: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_enumerate_data(
        j: *mut sd_journal,
        data: *mut *const ::std::os::raw::c_void,
        l: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_restart_data(j: *mut sd_journal);
}
extern "C" {
    pub fn sd_journal_add_match(
        j: *mut sd_journal,
        data: *const ::std::os::raw::c_void,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_add_disjunction(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_add_conjunction(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_flush_matches(j: *mut sd_journal);
}
extern "C" {
    pub fn sd_journal_seek_head(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_seek_tail(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_seek_monotonic_usec(
        j: *mut sd_journal,
        boot_id: sd_id128_t,
        usec: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_seek_realtime_usec(j: *mut sd_journal, usec: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_seek_cursor(
        j: *mut sd_journal,
        cursor: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_cursor(
        j: *mut sd_journal,
        cursor: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_test_cursor(
        j: *mut sd_journal,
        cursor: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_cutoff_realtime_usec(
        j: *mut sd_journal,
        from: *mut u64,
        to: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_cutoff_monotonic_usec(
        j: *mut sd_journal,
        boot_id: sd_id128_t,
        from: *mut u64,
        to: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_usage(j: *mut sd_journal, bytes: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_query_unique(
        j: *mut sd_journal,
        field: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_enumerate_unique(
        j: *mut sd_journal,
        data: *mut *const ::std::os::raw::c_void,
        l: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_restart_unique(j: *mut sd_journal);
}
extern "C" {
    pub fn sd_journal_enumerate_fields(
        j: *mut sd_journal,
        field: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_restart_fields(j: *mut sd_journal);
}
extern "C" {
    pub fn sd_journal_get_fd(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_events(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_timeout(
        j: *mut sd_journal,
        timeout_usec: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_process(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_wait(j: *mut sd_journal, timeout_usec: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_reliable_fd(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_catalog(
        j: *mut sd_journal,
        text: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_get_catalog_for_message_id(
        id: sd_id128_t,
        text: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_has_runtime_files(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_journal_has_persistent_files(j: *mut sd_journal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_get_session(
        pid: pid_t,
        session: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_get_owner_uid(pid: pid_t, uid: *mut uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_get_unit(
        pid: pid_t,
        unit: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_get_user_unit(
        pid: pid_t,
        unit: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_get_slice(
        pid: pid_t,
        slice: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_get_user_slice(
        pid: pid_t,
        slice: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_get_machine_name(
        pid: pid_t,
        machine: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_pid_get_cgroup(
        pid: pid_t,
        cgroup: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_peer_get_session(
        fd: ::std::os::raw::c_int,
        session: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_peer_get_owner_uid(
        fd: ::std::os::raw::c_int,
        uid: *mut uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_peer_get_unit(
        fd: ::std::os::raw::c_int,
        unit: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_peer_get_user_unit(
        fd: ::std::os::raw::c_int,
        unit: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_peer_get_slice(
        fd: ::std::os::raw::c_int,
        slice: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_peer_get_user_slice(
        fd: ::std::os::raw::c_int,
        slice: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_peer_get_machine_name(
        fd: ::std::os::raw::c_int,
        machine: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_peer_get_cgroup(
        pid: pid_t,
        cgroup: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_uid_get_state(
        uid: uid_t,
        state: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_uid_get_display(
        uid: uid_t,
        session: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_uid_is_on_seat(
        uid: uid_t,
        require_active: ::std::os::raw::c_int,
        seat: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_uid_get_sessions(
        uid: uid_t,
        require_active: ::std::os::raw::c_int,
        sessions: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_uid_get_seats(
        uid: uid_t,
        require_active: ::std::os::raw::c_int,
        seats: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_is_active(session: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_is_remote(session: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_state(
        session: *const ::std::os::raw::c_char,
        state: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_uid(
        session: *const ::std::os::raw::c_char,
        uid: *mut uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_seat(
        session: *const ::std::os::raw::c_char,
        seat: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_service(
        session: *const ::std::os::raw::c_char,
        service: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_type(
        session: *const ::std::os::raw::c_char,
        type_: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_class(
        session: *const ::std::os::raw::c_char,
        clazz: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_desktop(
        session: *const ::std::os::raw::c_char,
        desktop: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_display(
        session: *const ::std::os::raw::c_char,
        display: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_remote_host(
        session: *const ::std::os::raw::c_char,
        remote_host: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_remote_user(
        session: *const ::std::os::raw::c_char,
        remote_user: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_tty(
        session: *const ::std::os::raw::c_char,
        display: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_session_get_vt(
        session: *const ::std::os::raw::c_char,
        vtnr: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_seat_get_active(
        seat: *const ::std::os::raw::c_char,
        session: *mut *mut ::std::os::raw::c_char,
        uid: *mut uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_seat_get_sessions(
        seat: *const ::std::os::raw::c_char,
        sessions: *mut *mut *mut ::std::os::raw::c_char,
        uid: *mut *mut uid_t,
        n_uids: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_seat_can_multi_session(seat: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_seat_can_tty(seat: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_seat_can_graphical(seat: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_machine_get_class(
        machine: *const ::std::os::raw::c_char,
        clazz: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_machine_get_ifindices(
        machine: *const ::std::os::raw::c_char,
        ifindices: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_get_seats(seats: *mut *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_get_sessions(
        sessions: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_get_uids(users: *mut *mut uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_get_machine_names(
        machines: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_login_monitor {
    _unused: [u8; 0],
}
extern "C" {
    pub fn sd_login_monitor_new(
        category: *const ::std::os::raw::c_char,
        ret: *mut *mut sd_login_monitor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_login_monitor_unref(m: *mut sd_login_monitor) -> *mut sd_login_monitor;
}
extern "C" {
    pub fn sd_login_monitor_flush(m: *mut sd_login_monitor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_login_monitor_get_fd(m: *mut sd_login_monitor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_login_monitor_get_events(m: *mut sd_login_monitor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sd_login_monitor_get_timeout(
        m: *mut sd_login_monitor,
        timeout_usec: *mut u64,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
